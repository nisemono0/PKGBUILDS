diff --git a/src/transformers_ocr.py b/src/transformers_ocr.py
index 17def91..aa38769 100755
--- a/src/transformers_ocr.py
+++ b/src/transformers_ocr.py
@@ -124,6 +124,20 @@ def maim_select(screenshot_path: str):
         stderr=sys.stdout,
     )
 
+def scrot_select(screenshot_path: str, freeze: bool):
+    raise_if_missing("scrot")
+    if freeze:
+        return subprocess.run(
+            ("scrot", "-s", "-f", "-l", "mode=classic,width=2,color=white", "--overwrite", "--format", "png", "--compression", "1", screenshot_path,),
+            check=True,
+            stderr=sys.stdout,
+        )
+    else:
+        return subprocess.run(
+            ("scrot", "-s", "-l", "mode=edge,width=2,color=white", "--overwrite", "--format", "png", "--compression", "1", screenshot_path,),
+            check=True,
+            stderr=sys.stdout,
+        )
 
 def grim_select(screenshot_path: str):
     raise_if_missing("grim", "slurp")
@@ -133,14 +147,19 @@ def grim_select(screenshot_path: str):
     )
 
 
-def take_screenshot(screenshot_path):
+def take_screenshot(screenshot_path, freeze):
     match CURRENT_PLATFORM:
         case Platform.GNOME:
             gnome_screenshot_select(screenshot_path)
         case Platform.KDE:
             spectactle_select(screenshot_path)
         case Platform.Xorg:
-            maim_select(screenshot_path)
+            if is_installed("scrot"):
+                scrot_select(screenshot_path, freeze)
+            elif is_installed("maim"):
+                maim_select(screenshot_path)
+            else:
+                raise MissingProgram("You need maim or scrot installed")
         case Platform.Wayland:
             grim_select(screenshot_path)
 
@@ -157,7 +176,7 @@ def write_command_to_pipe(command: str, file_path: str):
         pipe.write(OcrCommand(action=command, file_path=file_path).as_json())
 
 
-def run_ocr(command: str, image_path: Optional[str] = None) -> None:
+def run_ocr(command: str, image_path: Optional[str] = None, freeze: Optional[bool] = False) -> None:
     ensure_listening()
     if image_path is not None:
         write_command_to_pipe(command, image_path)
@@ -165,7 +184,7 @@ def run_ocr(command: str, image_path: Optional[str] = None) -> None:
 
     with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as screenshot_file:
         try:
-            take_screenshot(screenshot_file.name)
+            take_screenshot(screenshot_file.name, freeze)
         except subprocess.CalledProcessError as ex:
             raise ScreenshotCancelled() from ex
         write_command_to_pipe(command, screenshot_file.name)
@@ -432,12 +451,14 @@ You need to run '{prog_name()} download' once after installation.
     subparsers = parser.add_subparsers(title="commands")
 
     recognize_parser = subparsers.add_parser("recognize", help="OCR a part of the screen.", aliases=["ocr"])
+    recognize_parser.add_argument("--freeze", "-f", help="Freeze the screen when selecting text (scrot only)", default=False, action="store_true")
     recognize_parser.add_argument("--image-path", help="Path to image to parse.", metavar="<path>", default=None)
-    recognize_parser.set_defaults(func=lambda args: run_ocr("recognize", image_path=args.image_path))
+    recognize_parser.set_defaults(func=lambda args: run_ocr("recognize", image_path=args.image_path, freeze=args.freeze))
 
     hold_parser = subparsers.add_parser("hold", help="OCR and hold a part of the screen.")
+    hold_parser.add_argument("--freeze", "-f", help="Freeze the screen when selecting text (scrot only)", default=False, action="store_true")
     hold_parser.add_argument("--image-path", help="Path to image to parse.", metavar="<path>", default=None)
-    hold_parser.set_defaults(func=lambda args: run_ocr("hold", image_path=args.image_path))
+    hold_parser.set_defaults(func=lambda args: run_ocr("hold", image_path=args.image_path, freeze=args.freeze))
 
     download_parser = subparsers.add_parser("download", help="Download OCR files.")
     download_parser.set_defaults(func=lambda _args: download_manga_ocr())
